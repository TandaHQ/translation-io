// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Glob = require("glob");
var $$Array = require("bs-platform/lib/js/array.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Filename = require("bs-platform/lib/js/filename.js");
var Log$TranslationIo = require("./Log.bs.js");
var Util$TranslationIo = require("./Util.bs.js");

function read(file) {
  return Fs.readFileSync(file, "utf8");
}

function write(name, content) {
  Fs.writeFileSync(name, content, "utf8");
  return /* () */0;
}

function load(glob) {
  var files = Glob.sync(glob);
  return $$Array.map((function (file) {
                var x = Js_json.decodeObject(JSON.parse(Fs.readFileSync(file, "utf8")));
                if (x) {
                  return x[0];
                } else {
                  return Util$TranslationIo.fail("Translations must be plain JSON objects. See `" + (file + "`."));
                }
              }), files);
}

function build_complete(objects) {
  var dict = { };
  $$Array.iter((function (obj) {
          return $$Array.iter((function (param) {
                        var v = param[1];
                        var k = param[0];
                        var existing = dict[k];
                        if (existing !== undefined) {
                          Log$TranslationIo.warn("Duplicate key found! Key: " + (k + (". Values: " + (JSON.stringify(existing) + (", " + (JSON.stringify(v) + "."))))));
                        }
                        var match = Js_json.decodeString(v);
                        if (match) {
                          dict[k] = v;
                          return /* () */0;
                        } else {
                          return Log$TranslationIo.warn("Translation value is not a string! Key: " + (k + (" has value `" + (JSON.stringify(v) + "`"))));
                        }
                      }), Js_dict.entries(obj));
        }), objects);
  return dict;
}

function translations_as_string(glob) {
  var r = build_complete(load(glob));
  console.log(Util$TranslationIo.po_generator(r));
  return JSON.stringify(r, null, 2);
}

function write_files(directory, locales, messages) {
  return $$Array.iter((function (filename) {
                Fs.writeFileSync(filename, messages, "utf8");
                return /* () */0;
              }), $$Array.map((function (locale) {
                    return directory + (Filename.dir_sep + ("translation." + (locale + ".json")));
                  }), locales));
}

function run(config) {
  var output = translations_as_string(config[/* messages */1]);
  return write_files(config[/* output */4], $$Array.concat(/* :: */[
                  /* array */[config[/* sourceLocale */2]],
                  /* :: */[
                    config[/* targetLocales */3],
                    /* [] */0
                  ]
                ]), output);
}

exports.read = read;
exports.write = write;
exports.load = load;
exports.build_complete = build_complete;
exports.translations_as_string = translations_as_string;
exports.write_files = write_files;
exports.run = run;
/* fs Not a pure module */
